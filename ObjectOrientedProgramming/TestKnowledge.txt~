1. What are the six combinations of access modifier keywords and what do they
do?
	public: no restrictions on accessing member
	private: Access is limited only to inside the class
	protected: Access is limited only to inside the class and classes that
	inherit it.
	internal: Access is limited to classes within the same assembly
	protected internal: Access is limited to classes within the same
	assembly and derived classes in same assembly
	private protected: Access is limited to class or derived class in 
	same assembly

2. What is the difference between the static, const, and readonly keywords
when applied to a type member?
	Const variables must be assigned a value at the time of declaration
	and cannot be modified. Readonly can be assigned at runtime but then
	cannot be modified. Static properties can only be set by static
	members.

3. What does a constructor do?
	Constructors are methods that execute upon creation of the object.

4. Why is the partial keyword useful?
	Having partial classes is useful for program structure because 
	a user can create a partial class of an existing partial class
	to add their own functionality to that class.

5. What is a tuple?
	A tuple is a finite sequence of elements.

6. What does the C# record keyword do?
	A record is similar to a class or struct because it is a reference
	type but it also has value-based equality. When seeing if two records
	are equal, it will check if all fields between the two records are
	equal.

7. What does overloading and overriding mean?
	Overloading is creating the same method with different functionalities
	based on the number of parameters. Function overriding is creating a 
	method in a derived class that functions differently from the method
	with the same name in the bas class.

8. What is the difference between a field and a property?
	A field is a variable stated in a class whereas a property is a member
	that provides functionality in reading and writing a field variable.

9. How do you make a method parameter optional?

10. What is an interface and how is it different from abstract class?

11. What accessibility level are members of an interface?

12. True/False. Polymorphism allows derived classes to provide different
implementations of the same method.

13. True/False. The override keyword is used to indicate that a method in a
derived class is providing its own implementation of a method.

14. True/False. The new keyword is used to indicate that a method in a derived
class is providing its own implementation of a method.

15. True/False. Abstract methods can be used in a normal (non-abstract) class.

16. True/False. Normal (non-abstract) methods can be used in an abstract
class. 

17. True/False. Derived classes can override methods that were virtual in the
base class. 

18. True/False. Derived classes can override methods that were abstract in the
base class.

19. True/False. In a derived class, you can override a method that was neither
virtual nor abstract in the base class.

20. True/False. A class that implements an interface does not have to provide
an implementation for all of the members of the interface.

21. True/False. A class that implements an interface is allowed to have other
members that aren't defined in the interface.

22. True/False. A class can have more than one base class.

23. True/False. A class can implement more than one interface.
