1. Create a view named "view_product_order_[your_last_name]", list all products and total ordered quantity for that product.

create view view_product_order_olsen as
select p.ProductID, p.ProductName, sum(od.Quantity) [Total Ordered]
from Products p left join [Order Details] od on p.ProductID = od.ProductID
group by p.ProductID, p.ProductName;
go

2. Create a stored procedure "sp_product_order_quantity_[your_last_name]" that accept product id as an input and total quantities of order as output parameter.

create proc sp_product_order_quantity_olsen @pid int as
begin 
select sum(od.Quantity) [Total Ordered]
from Products p left join [Order Details] od on p.ProductID = od.ProductID
where p.ProductID = @pid
group by p.ProductID
end
go

3. Create a stored procedure "sp_product_order_city_[your_last_name]" that accept product name as an input and top 5 cities that ordered most that product combined with the total quantity of that product ordered from that city as output.

create proc sp_product_order_city_olsen @pname varchar(30) as
begin 
select top 5 o.ShipCity, sum(od.Quantity) [Total Ordered]
from Orders o join [Order Details] od on o.OrderID = od.OrderID join Products p on od.ProductID = p.ProductID
where p.ProductName = @pname
group by o.ShipCity
order by [Total Ordered] Desc
end 
go

4. Create 2 new tables "people_your_last_name" "city_your_last_name". City table has two records: {Id:1, City:Seattle}, {Id:2, City:Green Bay}. People has three records: {Id:1, Name:Aaron Rodgers, City:2}, {Id: 2, Name: Russell Wilson, City: 1}, {Id:3, Name:Jody Nelson, City:2}. Remove city of Seattle. If there was anyone from Seattle, put them into a new city "Madison". Create a view "Packers_your_name" lists all people from Green Bay. If any error occured. no changes should be made to DB. (after test) Drop both tables and view.

create database Assign3

use Assign3

create table city_olsen (
	Id int Primary Key,
	Name varchar(30)
)

create table people_olsen (
	Id int Primary Key,
	Name varchar(30),
	City int Foreign Key references city_olsen(Id) on delete set null
)

insert into city_olsen (Id, Name)
values (1, 'Seattle'), (2, 'GreenBay')

insert into people_olsen(Id, Name, City)
values (1, 'Aaron Rodgers', 2), (2, 'Russell Wilson', 1), (3, 'Jody Nelson', 2)

delete from city_olsen where Name = 'Seattle'

insert into city_olsen (Id, Name) values (3, 'Madison')

update people_olsen
set City = 3
where City is Null

create view Packers_olsen as
select p.Name 
from city_olsen c left join people_olsen p on c.Id = p.City
where c.Name = 'GreenBay'
go


5. Create a stored procedure "sp_birthday_employees_[your_last_name]" that creates a new table "birthday_employees_your_last_name" and fill it with all employees that have a birthday on Feb. (Make a screen shot) drop the table. Employee table should not be affected.

create proc sp_birthday_employees_olsen as
begin
select FirstName + ' ' + LastName [Full Name] into birthday_employees_olsen
from Employees
where Month(BirthDate) = 2;
end
go

exec sp_birthday_employees_olsen

select * from birthday_employees_olsen

drop table birthday_employees_olsen

6. How do you make sure two tables have the same data?
	You can use select * from two tables with an union between. If the size of that table is the same size of both of the tables, then they contain the same
	data. This is because the union will not show duplicate data, thus if the union table is larger than the both of the tables, then one of the tables 
	contained data that the other table didn't have.

